openapi: 3.0.3
info:
    version: '1.0'
    title: "E-Commerce assignment"
    description: API for an E-Commerce.
    license:
      name: MIT
servers:
  - url: localhost:8000/api/v1
    description: Localhost webserver
  - url: https://se2-project-25.herokuapp.com/api/v1
    description: Heroku demo
components:
  securitySchemes:
    token:
      type: apiKey
      name: x-access-token
      in: header
    user-id:
      type: apiKey
      name: user-id
      in: header
  schemas:
    User:
      type: object
      properties:
        self:
          type: string
          example: /api/v1/users/5fb291268c27d33204eaf0d3
        name:
          type: string
          example: "Mario"
        surname:
          type: string
          example: "Rossi"
        email:
          type: string
          example: "mariorossi@mail.com"
        password:
          type: string
          example: "password"
    Product:
      type: object
      properties:
        self:
          type: string
          example: /products/
        name:
          type: string
          example: 'Tablet 8 4/64 GB'
        image:
          type: string
          example: '/res/productid/image.png'
        description:
          type: string
          example: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'
        price:
          type: number
          example: 69
        amount:
          type: integer
          example: 100
        user_id:
          type: string
          example: '5fb291268c27d33204eaf0d3'
    Order:
      type: object
      properties:
        self:
          type: string
          example: /api/v1/users/5fbcdc65fc25c72740cd2ef7
        id_user:
          type: string
          example: '5fb291268c27d33204eaf0d3'
        id_product:
          type: string
          example: '5fb291268c27d33204eaf0d3'
        address:
          type: string
          example: 'Lorem ipsum'
        numCard:
          type: number
          example: 1234
        expCard:
          type: string
          example: '12/2020'
    Review:
      type: object
      properties:
        self:
          type: string
          example: /reviews/2
        title:
          type: string
          example: 'Review title'
        text:
          type: string
          example: 'This product is good'
        score:
          type: number
          example: 5
        userId:
          type: string
          example: '5fb3db2f227c832e08526448'
        productId:
          type: string
          example: '5fb91302291e8870ac97748a'
    Cart:
      type: object
      properties:
        _id:
          type: string
          example: "5fb291268c27d33204eaf0d3"
        amount:
          type: number
          example: 5
        userId:
          type: string
          example: "5fb291268c27d33204eaf0f4"
        productId:
          type: string
          example: "5fb91302291e8870ac97748a"
paths:
  /products:
    get:
      description: Complete list of all available products
      summary: List of products
      responses:
        "200":
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: string
                example: 'The request to the database went wrong. Try later or contact us.'
  /products?search:
    get:
      description: List of products meeting search keywords
      summary: List of products meeting search
      parameters:
        - name: search
          in: query
          description: The string to search into products
          required: true
          schema:
            type: string
            example: "computer"
      responses:
        "200":
          description: List of products meeting search
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: string
                example: 'The request to the database went wrong. Try later or contact us.'
  /products/id:
    get:
      description: Retrieves a specific product given an id
      summary: Product with given id
      responses:
        "200":
          description: Product with given id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "404":
          description: Specified product does not exist
          content:
            application/json:
              schema:
                type: string
                example: "The product can't be found."

        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: string
                example: 'The request to the database went wrong. Try later or contact us.'
    post:
      description: Add a new product and returns it
      summary: Add a new product
      security:
        - token : []
        - user-id: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - image
                - description
                - price
                - amount
                - userId
              properties:
                name:
                  type: string
                  example: 'Tablet 8 4/64 GB'
                image:
                  type: string
                  example: '/res/productid/image.png'
                description:
                  type: string
                  example: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.'
                price:
                  type: number
                  example: 69.50
                amount:
                  type: number
                  example: 25
                userId:
                  type: string
                  example: 5fb291268c27d33204eaf0d3
      responses:
        "201":
          description: New product added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Error, bad request (wrong data type in a field)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    put:
      description: Updates a specific product by an identifier
      summary: Update product
      security:
        - token : []
        - user-id: []
      responses:
        "200":
          description: Product object by id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "500":
          description: Error, wrong request to the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Error, bad request (wrong data type in a field)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "404":
          description: Error, product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      description: Remove a product from the shop
      summary: Remove product
      security:
        - token : []
        - user-id: []
      responses:
        "200":
          description: Removed product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "500":
          description: Error, wrong request to the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "404":
          description: Error, product not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /products/myProducts/userId:
    get:
      description: Get all the products sold by the user with id 'userId'
      summary: Get products
      security:
        - token : []
        - user-id: []
      responses:
        "200":
          description: Products of the user 'userId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "500":
          description: Error, wrong request to the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Error, bad format of userId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "404":
          description: Error, user not found or products not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /products/myOrders/userId:
    get:
      description: Get all the orders done by the user with id 'userId'
      summary: Get orders
      security:
        - token : []
        - user-id: []
      responses:
        "200":
          description: Orders of the user 'userId'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "500":
          description: Error, wrong request to the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Error, bad format of userId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "404":
          description: Error, user not found or orders not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
  /orders:
    post:
      description: Add a new order and returns it
      summary: Add a new order
      security:
        - token : []
        - user-id: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - id_product
                - address
                - numCard
                - expCard
              properties:
                id_product:
                  type: string
                  example: '5fb291268c27d33204eaf0d3'
                address:
                  type: string
                  example: 'Lorem ipsum'
                numCard:
                  type: number
                  example: 1234
                expCard:
                  type: string
                  example: '12/2020'
      responses:
        "201":
          description: The order have been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          description: One of id_product, address, numCard, expCard, year, month, id_user is not valid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
                  error:
                    type: string
                    example: 'User id bad format'
        "401":
          description: No token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'No token provided.'
        "403":
          description: No valid token provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'Failed to authenticate token'
        "404":
          description: Product_id or User_id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'Product not found.'
        "500":
          description: The request to the database gone wrong.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'The request to the database gone wrong. Try later or contact us.'
    get:
      description: get all orders associated with id_user
      summary: get all orders
      security:
        - token : []
        - user-id: []
      responses:
        "200":
          description: at least one order is associed with id_user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        "401":
          description: No token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'No token provided.'
        "403":
          description: No valid token provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'Failed to authenticate token'
        "404":
          description: Order_id with User_id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'No order associated with user_id'
        "500":
          description: The request to the database gone wrong.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'The request to the database gone wrong. Try later or contact us.'
  /orders/id:
    get:
      description: get specific order associated with id_user
      summary: get order
      security:
        - token : []
        - user-id: []
      responses:
        "200":
          description: The specific order exists and it is associated with user id.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "401":
          description: No token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'No token provided.'
        "403":
          description: No valid token provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'Failed to authenticate token'
        "404":
          description: Order_id with User_id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'The order associated with user_id not found'
        "500":
          description: The request to the database gone wrong.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'The request to the database gone wrong. Try later or contact us.'
    put:
      description: edit address of an order associated with id_user
      summary: edit addresss of an order
      security:
        - token : []
        - user-id: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - address
              properties:
                address:
                  type: string
                  example: 'Lorem ipsum'
      responses:
        "200":
          description: The specific order updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'true'
                  message:
                    type: string
                    example: 'update order'
        "401":
          description: No token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'No token provided.'
        "403":
          description: No valid token provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'Failed to authenticate token'
        "404":
          description: Order_id with User_id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'The order associated with user_id not found'
        "500":
          description: The request to the database gone wrong.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'The request to the database gone wrong. Try later or contact us.'
    delete:
        description: delete specific order associated with id_user
        summary: delete order
        security:
          - token : []
          - user-id: []
        responses:
          "200":
            description: The specific order exists and deleted.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: string
                      example: 'true'
                    message:
                      type: string
                      example: 'order deleted'
          "401":
            description: No token provided
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    code:
                      type: string
                      example: 'false'
                    message:
                      type: string
                      example: 'No token provided.'
          "403":
            description: No valid token provided.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    code:
                      type: string
                      example: 'false'
                    message:
                      type: string
                      example: 'Failed to authenticate token'
          "404":
            description: Order_id with User_id not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: string
                      example: 'false'
                    message:
                      type: string
                      example: 'The order associated with user_id not found'
          "500":
            description: The request to the database gone wrong.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: string
                      example: 'false'
                    message:
                      type: string
                      example: 'The request to the database gone wrong. Try later or contact us.'
  /users:
    post:
      description: Add a new user to the database. It is comparable to the registration fase
      summary: Add new user
      responses:
        "201":
          description: The user created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Body values are not valid for the types.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: '400'
                  message:
                    type: string
                    example: 'The field x is not valid, please correct and retry.'
        "500":
          description: The request to the database gone wrong.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: '500'
                  message:
                    type: string
                    example: 'The request to the database gone wrong. Try later or contact us.'
  /users/id:
    get:
      description: Get a specific user, from an identifier. If the header contains token and user id equals to the one on the request, then can view all params. Otherwise only name and self will show.
      summary: Get user
      responses:
        "200":
          description: The user corresponding to the identifier if token is valid and user id is right.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "200":
          description: The user corresponding to the identifier, if token not valid, or user id not equals.
          content:
            application/json:
              schema:
                type: object
                properties:
                  self:
                    type: string
                    example: /api/v1/users/5fb291268c27d33204eaf0d3
                  name:
                    type: string
                    example: "Mario"
        "404":
          description: The user searched is not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: 'The user can not be found.'
        "500":
          description: The request to the database gone wrong.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: '500'
                  message:
                    type: string
                    example: 'The request to the database gone wrong. Try later or contact us.'
    put:
      description: Edit the information of an user, listing only the fields changed.
      summary: Edit user info
      security:
        - token : []
        - user-id: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Mario"
                surname:
                  type: string
                  example: "Rossi"
                email:
                  type: string
                  example: "mariorossi@mail.com"
                password:
                  type: string
                  example: "password"
      responses:
        "201":
          description: The user informations have been modified.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: The id product is badly formatted
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "400"
                  message:
                    type: string
                    example: "The id product is badly formatted."
        "400":
          description: The user-id header is badly formatted
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "400"
                  message:
                    type: string
                    example: "The user-id header is badly formatted."
        "401":
          description: No token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "401"
                  message:
                    type: string
                    example: "No token provided."
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "403"
                  message:
                    type: string
                    example: "Failed to authenticate token."
        "403":
          description: The token is not associated with this user-id
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "403"
                  message:
                    type: string
                    example: "The token is not associated with this user-id."
        "404":
          description: The user-id header can not be found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "404"
                  message:
                    type: string
                    example: "The user-id header can not be found."
        "404":
          description: The user cannot be found in the database
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: 'The user can not be found.'
        "500":
          description: The request to the database gone wrong.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: '500'
                  message:
                    type: string
                    example: 'The request to the database gone wrong. Try later or contact us.'
    delete:
      description: Delete one user by the id.
      summary: Delete user
      security:
        - token : []
        - user-id: []
      responses:
        "200":
          description: The user removed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: The id product is badly formatted
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "400"
                  message:
                    type: string
                    example: "The id product is badly formatted."
        "400":
          description: The user-id header is badly formatted
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "400"
                  message:
                    type: string
                    example: "The user-id header is badly formatted."
        "401":
          description: No token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "401"
                  message:
                    type: string
                    example: "No token provided."
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "403"
                  message:
                    type: string
                    example: "Failed to authenticate token."
        "403":
          description: The token is not associated with this user-id
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "403"
                  message:
                    type: string
                    example: "The token is not associated with this user-id."
        "404":
          description: The user-id header can not be found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "404"
                  message:
                    type: string
                    example: "The user-id header can not be found."
        "404":
          description: The user cannot be found in the database
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: 'The user can not be found.'
        "500":
          description: The request to the database gone wrong.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: '500'
                  message:
                    type: string
                    example: 'The request to the database gone wrong. Try later or contact us.'
  /users/login:
    post:
      description: Returns the authentication token for the current user.
      summary: Get auth token
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "mariorossi@mail.it"
                password:
                  type: string
                  example: "password"
      responses:
        "200":
          description: The token requested.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: 'Success'
                  user_id:
                    type: string
                    example: 5fb291268c27d33204eaf0d3
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiNWZiNjllMzc3Y2ZhYTgxODBjOWEzN2FhIiwiZW1haWwiOiJtYXN0ZXJAY2lzY28uY29tIiwiaWF0IjoxNjA2MjIxODMwLCJleHAiOjE2MDYyNjUwMzB9.bKWZ7oMXjEDnZPme9PKanW3Wmp2on_8kdEbcyFWK1pQ
        "404":
          description: User not found, can't release token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: '404'
                  message:
                    type: string
                    example: 'The user can not be found.'
        "500":
          description: The request to the database gone wrong.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: '500'
                  message:
                    type: string
                    example: 'The request to the database gone wrong. Try later or contact us.'
  /carts:
    get:
      description: Get all products currently in the cart for the logged user
      summary: Get all products in cart
      security:
        - token: []
        - user-id: []
      responses:
        "200":
          description: An array of all the items in the cart
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cart'
        "400":
          description: The user-id header is badly formatted
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "400"
                  message:
                    type: string
                    example: "The user-id header is badly formatted."
        "401":
          description: No token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "401"
                  message:
                    type: string
                    example: "No token provided."
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "403"
                  message:
                    type: string
                    example: "Failed to authenticate token."
        "403":
          description: The token is not associated with this user-id
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "403"
                  message:
                    type: string
                    example: "The token is not associated with this user-id."
        "404":
          description: The user-id header can not be found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "404"
                  message:
                    type: string
                    example: "The user-id header can not be found."
        "404":
          description: The userId related cart can't be found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "404"
                  message:
                    type: string
                    example: "The user can't be found."
        "500":
          description: The userId related cart can't be found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: '500'
                  message:
                    type: string
                    example: 'The request to the database gone wrong. Try later or contact us.'
    post:
      description: Buy all products in the cart associated with the user
      summary: Buy all products in the cart
      security:
        - token : []
        - user-id: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - address
                - numCard
                - expCard
              properties:
                address:
                  type: string
                  example: 'Lorem ipsum'
                numCard:
                  type: number
                  example: 1234
                expCard:
                  type: string
                  example: '12/2020'
      responses:
        "201":
          description: All order for products in carts have been created.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
        "400":
          description: One of address, numCard, expCard, year, month, id_user is not valid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
                  error:
                    type: string
                    example: 'User id bad format'
        "401":
          description: No token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'No token provided.'
        "403":
          description: No valid token provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'Failed to authenticate token'
        "404":
          description: User_id or product id not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'Product not found'
        "404":
          description: products not available
          content:
            application/json:
              schema:
                type: array
                items:
                  type: array
                  items:
                    $ref: '#/components/schemas/Product'

        "500":
          description: The request to the database gone wrong.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'The request to the database gone wrong. Try later or contact us.'
  /carts/id:
    post:
      description: Add a product in the cart associated with user
      summary: Add products in the cart
      security:
        - token : []
        - user-id: []
      responses:
        "201":
          description: Add product in cart.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        "400":
          description: One of id product or id user is not valid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
                  error:
                    type: string
                    example: 'User id bad format'
        "401":
          description: No token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'No token provided'
        "403":
          description: No valid token provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'Failed to authenticate token'
        "404":
          description: User_id not found or product not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'Product not found'
        "500":
          description: The request to the database gone wrong.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'The request to the database gone wrong. Try later or contact us.'
    put:
      description: Edit the amount of a product cart item of an user
      summary: Edit the amount of a product
      security:
        - token : []
        - user-id: []
      responses:
        "201":
          description: The updated product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        "400":
          description: The field amount must be a number
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "400"
                  message:
                    type: string
                    example: "The field amount must be a number."
        "400":
          description: The id product is badly formatted
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "400"
                  message:
                    type: string
                    example: "The id product is badly formatted."
        "400":
          description: The user-id header is badly formatted
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "400"
                  message:
                    type: string
                    example: "The user-id header is badly formatted."
        "401":
          description: No token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "401"
                  message:
                    type: string
                    example: "No token provided."
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "403"
                  message:
                    type: string
                    example: "Failed to authenticate token."
        "403":
          description: The token is not associated with this user-id
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "403"
                  message:
                    type: string
                    example: "The token is not associated with this user-id."
        "404":
          description: The user-id header can not be found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "404"
                  message:
                    type: string
                    example: "The user-id header can not be found."
        "404":
          description: The product can not be found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "404"
                  message:
                    type: string
                    example: "The product can not be found."
        "500":
          description: The userId related cart can't be found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: '500'
                  message:
                    type: string
                    example: 'The request to the database gone wrong. Try later or contact us.'
    delete:
      description: Remove the product from the cart of the user
      summary: Remove the product from the cart
      security:
        - token : []
        - user-id: []
      responses:
        "200":
          description: The updated product
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                    example: "5fb3db2f227c832e085264bf"
                  productId:
                    type: string
                    example: "5fb3db2f227c832e08526456"
        "400":
          description: The id product is badly formatted
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "400"
                  message:
                    type: string
                    example: "The id product is badly formatted."
        "400":
          description: The user-id header is badly formatted
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "400"
                  message:
                    type: string
                    example: "The user-id header is badly formatted."
        "401":
          description: No token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "401"
                  message:
                    type: string
                    example: "No token provided."
        "403":
          description: Failed to authenticate token
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "403"
                  message:
                    type: string
                    example: "Failed to authenticate token."
        "403":
          description: The token is not associated with this user-id
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "403"
                  message:
                    type: string
                    example: "The token is not associated with this user-id."
        "404":
          description: The user-id header can not be found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "404"
                  message:
                    type: string
                    example: "The user-id header can not be found."
        "404":
          description: The product can not be found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: "404"
                  message:
                    type: string
                    example: "The product can not be found."
        "500":
          description: The userId related cart can't be found
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: '500'
                  message:
                    type: string
                    example: 'The request to the database gone wrong. Try later or contact us.'
  /reviews:
    post:
      description: Add a new review
      summary: Add a new review
      security:
        - token : []
        - user-id: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - text
                - score
                - userId
                - productId
              properties:
                title:
                  type: string
                  example: 'Review title'
                text:
                  type: string
                  example: 'This product is good'
                score:
                  type: number
                  example: 5
                userId:
                  type: string
                  example: '5fb3db2f227c832e08526448'
                productId:
                  type: string
                  example: '5fb91302291e8870ac97748a'
      responses:
        "201":
          description: The review have been created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
        "400":
          description: One of title, text, score is not valid.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
        "403":
          description: No valid token provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'Failed to authenticate token.'
        "500":
          description: The request to the database gone wrong.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'The request to the database gone wrong. Try later or contact us.'
  /reviews/productId:
    get:
      description: Complete list of all reviews for the given product
      summary: List of reviews for a product
      responses:
        "200":
          description: List of reviews for a product
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        "404":
          description: Specified product does not exist
          content:
            application/json:
              schema:
                type: string
                example: "The product can't be found."
        "500":
          description: Server error
          content:
            application/json:
              schema:
                type: string
                example: 'The request to the database went wrong. Try later or contact us.'
  /reviews/id:
    put:
      description: Edit specific review
      summary: Edit review
      security:
        - token : []
        - user-id: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - text
                - score
              properties:
                title:
                  type: string
                  example: 'Review title'
                text:
                  type: string
                  example: 'This product is good'
                score:
                  type: number
                  example: 5
                userId:
                  type: string
                  example: '5fb3db2f227c832e08526448'
                productId:
                  type: string
                  example: '5fb91302291e8870ac97748a'
      responses:
        "200":
          description: The specific review was updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'true'
                  message:
                    type: string
                    example: 'review updated'
        "403":
          description: No valid token provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'Failed to authenticate token.'
        "404":
          description: The review was not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'The review associated with id not found'
        "500":
          description: The request to the database went wrong.
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: string
                    example: 'false'
                  message:
                    type: string
                    example: 'The request to the database went wrong. Try later or contact us.'
    delete:
        description: Delete specific review
        summary: Delete order
        security:
          - token : []
          - user-id: []
        responses:
          "200":
            description: The specific review existed and was deleted.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: string
                      example: 'true'
                    message:
                      type: string
                      example: 'review deleted'
          "403":
            description: No valid token provided.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: string
                      example: 'false'
                    message:
                      type: string
                      example: 'Failed to authenticate token.'
          "404":
            description: The specific review does not exist
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: string
                      example: 'false'
                    message:
                      type: string
                      example: 'The review associated with id does not exist'
          "500":
            description: The request to the database went wrong.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    success:
                      type: string
                      example: 'false'
                    message:
                      type: string
                      example: 'The request to the database went wrong. Try later or contact us.'